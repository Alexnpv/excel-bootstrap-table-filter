{"version":3,"sources":["../src/FilterMenu.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["FilterMenu","th","col","column","tds","$","this","toArray","initialize","menuItems","retrieveMenuItems","menu","dropdownFilterDropdown","appendChild","$trigger","children","$content","$menu","click","toggle","document","el","is","target","has","length","hide","isSelected","value","filter","item","selected","map","indexOf","searchToggle","toggleAll","selectAllCheckbox","HTMLInputElement","checked","toLowerCase","forEach","inputs","input","totalItems","selectedItems","selectAllToggle","clearSearch","searchFilter","val","row","innerHTML","dropdownFilterItem","td","innerText","createElement","className","type","setAttribute","parent","index","toString","dropdownFilterItemSelectAll","dropdownFilterSearch","dropdownFilterSort","direction","span","split","join","dropdownFilterContent","innerDivs","reduce","arr","values","push","sort","a","b","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","outerDiv","innerDiv","concat","html","arrow","icon","FilterCollection","filterMenus","find","idx","rows","filterMenu","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","updateRowVisibility","change","data","table","$sortElement","order","attr","keyup","$input","$row","visible","prevSelected","nextSelected","show","switching","i","x","y","shouldSwitch","getElementsByTagName","parentNode","insertBefore","fn","excelTableFilter","options","extend","filterCollection"],"mappings":"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","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["export class FilterMenu {\r\n\r\n  th:                 HTMLElement;\r\n  tds:                Array<HTMLElement>;\r\n  menuItems:          Array<MenuItem>;\r\n  column:             number;\r\n  menu:               HTMLElement;\r\n  inputs:             Array<Element>;\r\n  selectAllCheckbox:  Element;\r\n  searchFilter:       Element;\r\n\r\n  constructor (th: HTMLElement, col: number) {\r\n    this.th = th;\r\n    this.column = col;\r\n    this.tds = $('table tbody tr td:nth-child(' + (this.column + 1) + ')').toArray();\r\n  }\r\n\r\n  public initialize(): void {\r\n    this.menuItems = this.retrieveMenuItems();\r\n    this.menu = this.dropdownFilterDropdown();\r\n    this.th.appendChild(this.menu);\r\n\r\n    // variables for click handlers\r\n    let $trigger = $(this.menu.children[0]);\r\n    let $content = $(this.menu.children[1]);\r\n    let $menu = $(this.menu);\r\n\r\n    // toggle hide/show when the trigger is clicked\r\n    $trigger.click(() => $content.toggle());\r\n\r\n    $(document).click(function(el) {\r\n      // hide the content if the user clicks outside of the menu\r\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\r\n        $content.hide();\r\n      } \r\n    });\r\n  }\r\n\r\n  public isSelected(value: string): boolean {\r\n    return this.menuItems.filter(function(item: MenuItem) {\r\n      return item.selected;\r\n    }).map(function(item: MenuItem) {\r\n      return item.value;\r\n    }).indexOf(value) > -1;\r\n  }\r\n\r\n  public searchToggle(value: string): void {\r\n    if (value.length > 0) {\r\n      // deselect All\r\n      this.toggleAll(false, false);\r\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\r\n\r\n      this.menuItems.filter(function(item) {\r\n        return item.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\r\n      }).forEach(function(item) {\r\n        item.selected = true;\r\n      });\r\n\r\n      this.inputs.filter(function(input: HTMLInputElement) {\r\n        return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\r\n      }).forEach(function(input: HTMLInputElement) {\r\n        input.checked = true;\r\n      });\r\n\r\n    } else {\r\n      this.toggleAll(true, false);\r\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\r\n    }\r\n  }\r\n\r\n\r\n  public toggle(value: string): void {\r\n    // delselect inventory\r\n    this.menuItems.filter(function(item: MenuItem) {\r\n      return item.value === value;\r\n    }).forEach(function(item: MenuItem) {\r\n      item.selected = !item.selected;\r\n    });\r\n\r\n    let totalItems = this.menuItems.length;\r\n    let selectedItems = this.menuItems.filter(function(item: MenuItem) {\r\n      return item.selected;\r\n    }).length;\r\n\r\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\r\n      this.selectAllCheckbox.checked = (totalItems === selectedItems);\r\n    }\r\n  }\r\n\r\n  public selectAllToggle(value: boolean): void {\r\n    this.toggleAll(value, true);\r\n  }\r\n\r\n  private toggleAll(value: boolean, clearSearch: boolean): void {\r\n    if (clearSearch) $(this.searchFilter).val('');\r\n    // delselect inventory\r\n    this.menuItems.forEach(function(item: MenuItem) {\r\n      item.selected = value;\r\n    });\r\n    this.inputs.forEach(function(input: HTMLInputElement) {\r\n      input.checked = value;\r\n    });\r\n  }\r\n\r\n  private retrieveMenuItems(): Array<MenuItem> {\r\n    let inputs = this.inputs;\r\n    let column = this.column;\r\n    return this.tds.map(function(el: HTMLElement, row: number) {\r\n      return {\r\n        column: column,\r\n        row: row,\r\n        value: el.innerHTML,\r\n        selected: true\r\n      };\r\n    });\r\n  }\r\n  \r\n  private dropdownFilterItem(td: HTMLElement): HTMLElement {\r\n    // build holder div\r\n    let value = td.innerText;\r\n    let dropdownFilterItem = document.createElement('div');\r\n    dropdownFilterItem.className = 'dropdown-filter-item';\r\n    // build input\r\n    let input = document.createElement('input');\r\n    input.type = 'checkbox';\r\n    input.value = value;\r\n    input.setAttribute('checked','checked');\r\n    input.className = 'dropdown-filter-menu-item item';\r\n    // get index of td element\r\n    input.setAttribute('data-column', $(td).parent().children().index($(td)).toString());\r\n    // append input to holding div\r\n    dropdownFilterItem.appendChild(input);\r\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML + ' ' +  value;\r\n    return dropdownFilterItem;\r\n  }\r\n\r\n  private dropdownFilterItemSelectAll(): HTMLElement {\r\n    // build holder div\r\n    let value = 'Select All';\r\n    let dropdownFilterItemSelectAll = document.createElement('div');\r\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\r\n    // build input\r\n    let input = document.createElement('input');\r\n    input.type = 'checkbox';\r\n    input.value = 'Select All';\r\n    input.setAttribute('checked','checked');\r\n    input.className = 'dropdown-filter-menu-item select-all';\r\n    input.setAttribute('data-column', this.column.toString());\r\n    // append input to holding div\r\n    dropdownFilterItemSelectAll.appendChild(input);\r\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\r\n    return dropdownFilterItemSelectAll;\r\n  }\r\n  \r\n  private dropdownFilterSearch(): HTMLElement {\r\n    // build holder div\r\n    let dropdownFilterItem = document.createElement('div');\r\n    dropdownFilterItem.className = 'dropdown-filter-search';\r\n    // build input\r\n    let input = document.createElement('input');\r\n    input.type = 'text';\r\n    input.className = 'dropdown-filter-menu-search form-control';\r\n    input.setAttribute('data-column', this.column.toString());\r\n    input.setAttribute('placeholder', 'search');\r\n    // append input to holding div\r\n    dropdownFilterItem.appendChild(input);\r\n    return dropdownFilterItem;\r\n  }\r\n\r\n  private dropdownFilterSort(direction: string): HTMLElement {\r\n    // build holder div\r\n    let dropdownFilterItem = document.createElement('div');\r\n    dropdownFilterItem.className = 'dropdown-filter-sort';\r\n    // build span\r\n    let span = document.createElement('span');\r\n    span.className = direction.toLowerCase().split(' ').join('-');\r\n    span.setAttribute('data-column', this.column.toString());\r\n    span.innerText = direction;\r\n    // append input to holding div\r\n    dropdownFilterItem.appendChild(span);\r\n    return dropdownFilterItem;\r\n  }\r\n\r\n  private dropdownFilterContent(): HTMLElement {\r\n    // build holder div\r\n    let dropdownFilterContent = document.createElement('div');\r\n    dropdownFilterContent.className = 'dropdown-filter-content';\r\n\r\n    let innerDivs = this.tds.reduce(function(arr, el) {\r\n      let values = arr.map((el) => el.innerText);\r\n      if (values.indexOf(el.innerText) < 0) arr.push(el);\r\n      return arr;\r\n    }, [])\r\n    .sort(function(a, b) {\r\n      return a.innerText.toLowerCase() > b.innerText.toLowerCase() ? 1 : -1;\r\n    })\r\n    .map(this.dropdownFilterItem)\r\n\r\n    // map inputs to instance\r\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\r\n\r\n    // add select all checkbox\r\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\r\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\r\n    innerDivs.unshift(selectAllCheckboxDiv);\r\n\r\n    let searchFilterDiv = this.dropdownFilterSearch();\r\n    this.searchFilter = searchFilterDiv.firstElementChild;\r\n\r\n    // create outer div\r\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\r\n      outerDiv.appendChild(innerDiv);\r\n      return outerDiv;\r\n    }, document.createElement('div'));\r\n    outerDiv.className = 'checkbox-container';\r\n\r\n    return [ this.dropdownFilterSort( 'A to Z'), \r\n             this.dropdownFilterSort( 'Z to A'),\r\n             searchFilterDiv\r\n      ]\r\n      .concat(outerDiv)\r\n      .reduce(function(html, el) {\r\n        html.appendChild(el);\r\n        return html;\r\n    }, dropdownFilterContent);\r\n  }\r\n\r\n  private dropdownFilterDropdown(): HTMLElement {\r\n    // build holder div\r\n    let dropdownFilterDropdown = document.createElement('div');\r\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\r\n    let arrow = document.createElement('span');\r\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\r\n    let icon = document.createElement('i');\r\n    icon.className = 'arrow-down';\r\n    arrow.appendChild(icon);\r\n    dropdownFilterDropdown.appendChild(arrow);\r\n    dropdownFilterDropdown.appendChild(this.dropdownFilterContent());\r\n    return dropdownFilterDropdown;\r\n  }\r\n\r\n}\r\n","import { FilterMenu } from './FilterMenu'\r\n\r\nexport class FilterCollection {\r\n\r\n  filterMenus: Array<FilterMenu>;\r\n  rows: Array<HTMLElement>;\r\n  target: HTMLElement;\r\n\r\n  constructor (target: JQuery) {\r\n    this.filterMenus = target.find('th').toArray().map(function(th: HTMLElement, idx: number) {\r\n      return new FilterMenu(th, idx);\r\n    });\r\n    this.rows = target.find('tbody').find('tr').toArray();\r\n    this.target = target[0];\r\n  }\r\n\r\n  public initialize(): void {\r\n    this.filterMenus.forEach(function(filterMenu) {\r\n      filterMenu.initialize();\r\n    });\r\n    this.bindCheckboxes();\r\n    this.bindSelectAllCheckboxes();\r\n    this.bindSort();\r\n    this.bindSearch();\r\n  }\r\n\r\n  private bindCheckboxes(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-menu-item.item').change(function() {\r\n      let column = $(this).data('column');\r\n      let value = $(this).val();\r\n      filterMenus[column].toggle(value);\r\n      updateRowVisibility(filterMenus, rows);\r\n    });\r\n  }\r\n\r\n  private bindSelectAllCheckboxes(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-menu-item.select-all').change(function() {\r\n      let column = $(this).data('column');\r\n      let value = this.checked;\r\n      filterMenus[column].selectAllToggle(value);\r\n      updateRowVisibility(filterMenus, rows);\r\n    });\r\n  }\r\n  \r\n  private bindSort(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let sort = this.sort;\r\n    let table = this.target;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-sort').click(function() {\r\n      let $sortElement = $(this).find('span');\r\n      let column = $sortElement.data('column');\r\n      let order = $sortElement.attr('class');\r\n      sort(column, order, table);\r\n      updateRowVisibility(filterMenus, rows);\r\n    });\r\n  }\r\n\r\n  private bindSearch(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let sort = this.sort;\r\n    let table = this.target;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-search').keyup(function() {\r\n      let $input = $(this).find('input');\r\n      let column = $input.data('column');\r\n      let value = $input.val();\r\n      filterMenus[column].searchToggle(value);\r\n      updateRowVisibility(filterMenus, rows);\r\n    });\r\n  }\r\n\r\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<HTMLElement>): void {\r\n    rows.forEach(function(row) {\r\n      let $row = $(row)\r\n      let visible = $row.find('td').toArray().map(function(el, column) {\r\n        return filterMenus[column].isSelected(el.innerText);\r\n      }).reduce(function(prevSelected, nextSelected) {\r\n        return prevSelected && nextSelected;\r\n      }, true);\r\n      visible ? $row.show() : $row.hide();\r\n    });\r\n  }\r\n\r\n  private sort(column: number, order: string, table: HTMLElement): void {\r\n    var rows, switching, i, x, y, shouldSwitch;\r\n    switching = true;\r\n    while (switching) {\r\n      switching = false;\r\n      rows = table.getElementsByTagName(\"tr\");\r\n      for (i = 1; i < (rows.length - 1); i++) {\r\n        shouldSwitch = false;\r\n        x = rows[i].getElementsByTagName(\"td\")[column];\r\n        y = rows[i + 1].getElementsByTagName(\"td\")[column];\r\n        if (order === 'a-to-z') {\r\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n            shouldSwitch= true;\r\n            break;\r\n          }\r\n        } else {\r\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\r\n            shouldSwitch= true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (shouldSwitch) {\r\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n        switching = true;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import $ from 'jquery';\r\nimport { FilterCollection } from './FilterCollection'\r\n\r\n// Define the plugin function on the jQuery extension point.\r\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) {\r\n  let target = this;\r\n  // Merge the global options with the per-call options.\r\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\r\n  \r\n  let filterCollection = new FilterCollection(target);\r\n  filterCollection.initialize();\r\n\r\n  // Return the jQuery object for chaining.\r\n  return target;\r\n};\r\n\r\n// Define the plugin's global default options.\r\n($.fn as any).excelTableFilter.options = {};\r\n"]}