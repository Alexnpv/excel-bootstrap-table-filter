{"version":3,"sources":["../src/FilterMenu.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["FilterMenu","th","column","index","options","tds","$","this","toArray","initialize","menu","dropdownFilterDropdown","appendChild","$trigger","children","$content","$menu","click","toggle","document","el","is","target","has","length","hide","searchToggle","value","selectAllCheckbox","HTMLInputElement","checked","toggleAll","inputs","filter","input","toLowerCase","indexOf","forEach","updateSelectAll","searchFilter","val","selectAllUpdate","i","dropdownFilterItem","td","self","innerText","createElement","className","type","trim","replace","setAttribute","toString","innerHTML","dropdownFilterItemSelectAll","dropdownFilterSearch","dropdownFilterSort","direction","span","split","join","dropdownFilterContent","innerDivs","reduce","arr","values","map","push","sort","a","b","A","B","isNaN","Number","_this","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","outerDiv","innerDiv","elements","concat","search","html","arrow","icon","FilterCollection","ths","find","columnSelector","filterMenus","rows","table","get","filterMenu","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","updateRowVisibility","change","data","$sortElement","order","attr","keyup","$input","showRows","hideRows","selectedLists","j","content","textContent","selected","show","flip","tbody","toUpperCase","fn","excelTableFilter","extend","filterCollection"],"mappings":"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","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["export class FilterMenu {\r\n\r\n  th:                 HTMLElement;\r\n  tds:                Array<HTMLElement>;\r\n  column:             number;\r\n  index:              number;\r\n  menu:               HTMLElement;\r\n  inputs:             Array<Element>;\r\n  selectAllCheckbox:  Element;\r\n  searchFilter:       Element;\r\n  options:            Options;\r\n\r\n  constructor (th: HTMLElement, column: number, index: number, options: Options) {\r\n    this.options = options;\r\n    this.th = th;\r\n    this.column = column;\r\n    this.index = index;\r\n    this.tds = $('table tbody tr td:nth-child(' + (this.column + 1) + ')').toArray();\r\n  }\r\n\r\n  public initialize(): void {\r\n    this.menu = this.dropdownFilterDropdown();\r\n    this.th.appendChild(this.menu);\r\n\r\n    // variables for click handlers\r\n    let $trigger = $(this.menu.children[0]);\r\n    let $content = $(this.menu.children[1]);\r\n    let $menu = $(this.menu);\r\n\r\n    // toggle hide/show when the trigger is clicked\r\n    $trigger.click(() => $content.toggle());\r\n\r\n    $(document).click(function(el) {\r\n      // hide the content if the user clicks outside of the menu\r\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\r\n        $content.hide();\r\n      } \r\n    });\r\n  }\r\n\r\n  public searchToggle(value: string): void {\r\n    if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\r\n    if (value.length === 0){\r\n      this.toggleAll(true);\r\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\r\n      return;\r\n    }\r\n    // deselect all checkboxes initially\r\n    this.toggleAll(false);\r\n    // select checkboxes that match the search parameter\r\n    this.inputs.filter(function(input: HTMLInputElement) {\r\n      return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\r\n    }).forEach(function(input: HTMLInputElement) {\r\n      input.checked = true;\r\n    });\r\n  }\r\n\r\n\r\n  public updateSelectAll(): void {\r\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\r\n      // clear search parameters, if any\r\n      $(this.searchFilter).val('');\r\n      // Check if all inputs are selected\r\n      this.selectAllCheckbox.checked = (this.inputs.length === this.inputs.filter(function(input: HTMLInputElement) {\r\n        return input.checked;\r\n      }).length);\r\n    }\r\n  }\r\n\r\n  public selectAllUpdate(checked: boolean): void {\r\n    // clear search parameters, if any\r\n    $(this.searchFilter).val('');\r\n    this.toggleAll(checked);\r\n  }\r\n\r\n  private toggleAll(checked: boolean): void {\r\n    // loop through all inputs and check or uncheck each\r\n    for (var i=0; i < this.inputs.length; i++) {\r\n      let input = this.inputs[i];\r\n      if (input instanceof HTMLInputElement) input.checked = checked;\r\n    }\r\n  }\r\n  \r\n  private dropdownFilterItem(td: HTMLElement, self: any): HTMLElement {\r\n    // build holder div\r\n    let value = td.innerText;\r\n    let dropdownFilterItem = document.createElement('div');\r\n    dropdownFilterItem.className = 'dropdown-filter-item';\r\n    // build input\r\n    let input = document.createElement('input');\r\n    input.type = 'checkbox';\r\n    input.value = value.trim().replace(/ +(?= )/g,'');\r\n    input.setAttribute('checked','checked');\r\n    input.className = 'dropdown-filter-menu-item item';\r\n    // get index of td element\r\n    input.setAttribute('data-column', self.column.toString());\r\n    input.setAttribute('data-index', self.index.toString());\r\n    // append input to holding div\r\n    dropdownFilterItem.appendChild(input);\r\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML.trim() + ' ' +  value;\r\n    return dropdownFilterItem;\r\n  }\r\n\r\n  private dropdownFilterItemSelectAll(): HTMLElement {\r\n    // build holder div\r\n    let value = 'Select All';\r\n    let dropdownFilterItemSelectAll = document.createElement('div');\r\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\r\n    // build input\r\n    let input = document.createElement('input');\r\n    input.type = 'checkbox';\r\n    input.value = 'Select All';\r\n    input.setAttribute('checked','checked');\r\n    input.className = 'dropdown-filter-menu-item select-all';\r\n    input.setAttribute('data-column', this.column.toString());\r\n    input.setAttribute('data-index', this.index.toString());\r\n    // append input to holding div\r\n    dropdownFilterItemSelectAll.appendChild(input);\r\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\r\n    return dropdownFilterItemSelectAll;\r\n  }\r\n  \r\n  private dropdownFilterSearch(): HTMLElement {\r\n    // build holder div\r\n    let dropdownFilterItem = document.createElement('div');\r\n    dropdownFilterItem.className = 'dropdown-filter-search';\r\n    // build input\r\n    let input = document.createElement('input');\r\n    input.type = 'text';\r\n    input.className = 'dropdown-filter-menu-search form-control';\r\n    input.setAttribute('data-column', this.column.toString());\r\n    input.setAttribute('data-index', this.index.toString());\r\n    input.setAttribute('placeholder', 'search');\r\n    // append input to holding div\r\n    dropdownFilterItem.appendChild(input);\r\n    return dropdownFilterItem;\r\n  }\r\n\r\n  private dropdownFilterSort(direction: string): HTMLElement {\r\n    // build holder div\r\n    let dropdownFilterItem = document.createElement('div');\r\n    dropdownFilterItem.className = 'dropdown-filter-sort';\r\n    // build span\r\n    let span = document.createElement('span');\r\n    span.className = direction.toLowerCase().split(' ').join('-');\r\n    span.setAttribute('data-column', this.column.toString());\r\n    span.setAttribute('data-index', this.index.toString());\r\n    span.innerText = direction;\r\n    // append input to holding div\r\n    dropdownFilterItem.appendChild(span);\r\n    return dropdownFilterItem;\r\n  }\r\n\r\n  private dropdownFilterContent(): HTMLElement {\r\n    let self = this;\r\n    // build holder div\r\n    let dropdownFilterContent = document.createElement('div');\r\n    dropdownFilterContent.className = 'dropdown-filter-content';\r\n\r\n    let innerDivs = this.tds.reduce(function(arr, el) {\r\n      // get unique values in column\r\n      let values = arr.map((el) => el.innerText.trim());\r\n      if (values.indexOf(el.innerText.trim()) < 0) arr.push(el);\r\n      // return unique values\r\n      return arr;\r\n    }, [])\r\n    .sort(function(a, b) {\r\n      // sort values for display in dropdown\r\n      var A = a.innerText.toLowerCase();\r\n      var B = b.innerText.toLowerCase();\r\n\r\n      if (!isNaN(Number(A)) && !isNaN(Number(B))) {\r\n\r\n        // handle numbers\r\n        if(Number(A) < Number(B)) return -1;\r\n        if(Number(A) > Number(B)) return  1;\r\n\r\n      } else {\r\n\r\n        // handle strings\r\n        if(A < B) return -1;\r\n        if(A > B) return  1;\r\n\r\n      }\r\n      //return a.innerText.toLowerCase() > b.innerText.toLowerCase() ? 1 : -1;\r\n      return 0;\r\n    })\r\n    // create dropdown filter items out of each value\r\n    .map( (td) => {\r\n      return this.dropdownFilterItem(td, self);\r\n    })\r\n\r\n    // map inputs to instance, we will need these later\r\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\r\n\r\n    // add a select all checkbox\r\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\r\n    // map the select all  checkbox to the instance, we will need it later\r\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\r\n    // the checkbox will precede the other inputs\r\n    innerDivs.unshift(selectAllCheckboxDiv);\r\n\r\n    let searchFilterDiv = this.dropdownFilterSearch();\r\n    this.searchFilter = searchFilterDiv.firstElementChild;\r\n\r\n    // create outer div, and place all inner divs within it\r\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\r\n      outerDiv.appendChild(innerDiv);\r\n      return outerDiv;\r\n    }, document.createElement('div'));\r\n    outerDiv.className = 'checkbox-container';\r\n\r\n    let elements: Array<HTMLElement> = [];\r\n    if (this.options.sort  ) elements= elements.concat([ this.dropdownFilterSort( 'A to Z'),  this.dropdownFilterSort( 'Z to A')]);\r\n    if (this.options.search) elements.push(searchFilterDiv);\r\n\r\n    return elements.concat(outerDiv).reduce(function(html, el) {\r\n        html.appendChild(el);\r\n        return html;\r\n    }, dropdownFilterContent);\r\n  }\r\n\r\n  private dropdownFilterDropdown(): HTMLElement {\r\n    // build holder div\r\n    let dropdownFilterDropdown = document.createElement('div');\r\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\r\n    let arrow = document.createElement('span');\r\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\r\n    let icon = document.createElement('i');\r\n    icon.className = 'arrow-down';\r\n    arrow.appendChild(icon);\r\n    dropdownFilterDropdown.appendChild(arrow);\r\n    dropdownFilterDropdown.appendChild(this.dropdownFilterContent());\r\n    return dropdownFilterDropdown;\r\n  }\r\n\r\n}\r\n","import { FilterMenu } from './FilterMenu'\r\n\r\nexport class FilterCollection {\r\n\r\n  filterMenus:  Array<FilterMenu>;\r\n  rows:         Array<HTMLElement>;\r\n  ths:          Array<HTMLElement>;\r\n  table:        HTMLElement;\r\n  options:      Options;\r\n\r\n  constructor (target: JQuery, options: Options) {\r\n    this.options = options;\r\n    this.ths = target.find('th' + options.columnSelector).toArray()\r\n    this.filterMenus = this.ths.map(function(th: HTMLElement, index: number) {\r\n      let column = $(th).index();\r\n      return new FilterMenu(th, column, index, options);\r\n    });\r\n    this.rows = target.find('tbody').find('tr').toArray();\r\n    this.table = target.get(0);\r\n  }\r\n\r\n  public initialize(): void {\r\n    this.filterMenus.forEach(function(filterMenu) {\r\n      filterMenu.initialize();\r\n    });\r\n    this.bindCheckboxes();\r\n    this.bindSelectAllCheckboxes();\r\n    this.bindSort();\r\n    this.bindSearch();\r\n  }\r\n\r\n  private bindCheckboxes(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let ths = this.ths;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-menu-item.item').change(function() {\r\n      let index = $(this).data('index');\r\n      let value = $(this).val();\r\n      filterMenus[index].updateSelectAll();\r\n      updateRowVisibility(filterMenus, rows, ths);\r\n    });\r\n  }\r\n\r\n  private bindSelectAllCheckboxes(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let ths = this.ths;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-menu-item.select-all').change(function() {\r\n      let index = $(this).data('index');\r\n      let value = this.checked;\r\n      filterMenus[index].selectAllUpdate(value);\r\n      updateRowVisibility(filterMenus, rows, ths);\r\n    });\r\n  }\r\n  \r\n  private bindSort(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let ths = this.ths;\r\n    let sort = this.sort;\r\n    let table = this.table;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-sort').click(function() {\r\n      let $sortElement = $(this).find('span');\r\n      let column = $sortElement.data('column');\r\n      let order = $sortElement.attr('class');\r\n      sort(column, order, table);\r\n      updateRowVisibility(filterMenus, rows, ths);\r\n    });\r\n  }\r\n\r\n  private bindSearch(): void {\r\n    let filterMenus = this.filterMenus;\r\n    let rows = this.rows;\r\n    let ths = this.ths;\r\n    let updateRowVisibility = this.updateRowVisibility;\r\n    $('.dropdown-filter-search').keyup(function() {\r\n      let $input = $(this).find('input');\r\n      let index = $input.data('index');\r\n      let value = $input.val();\r\n      filterMenus[index].searchToggle(value);\r\n      updateRowVisibility(filterMenus, rows, ths);\r\n    });\r\n  }\r\n\r\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<HTMLElement>, ths: Array<HTMLElement>): void {\r\n    let showRows = rows;\r\n    let hideRows: Array<HTMLElement> = [];\r\n    let selectedLists = filterMenus.map(function(filterMenu) {\r\n      return {\r\n        column: filterMenu.column,\r\n        selected: filterMenu.inputs\r\n          .filter(function(input: HTMLInputElement) {\r\n            return input.checked\r\n          }).map(function(input: HTMLInputElement) {\r\n            return input.value.trim().replace(/ +(?= )/g,'');\r\n          })\r\n      };\r\n    });\r\n    for (let i=0; i < rows.length; i++) {\r\n      let tds = rows[i].children;\r\n      for (let j=0; j < selectedLists.length; j++) {\r\n        let content = tds[selectedLists[j].column].textContent.trim().replace(/ +(?= )/g,'')\r\n        if (selectedLists[j].selected.indexOf(content) === -1 ) {\r\n          $(rows[i]).hide();\r\n          break;\r\n        }\r\n        $(rows[i]).show();\r\n      }\r\n    }\r\n  }\r\n\r\n  private sort(column: number, order: string, table: HTMLElement): void {\r\n    let flip = 1;\r\n    if (order === 'z-to-a') flip = -1;\r\n    let tbody = $(table).find('tbody').get(0);\r\n    let rows = $(tbody).find('tr').get();\r\n\r\n    rows.sort(function(a, b) {\r\n      var A = a.children[column].textContent.toUpperCase(); \r\n      var B = b.children[column].textContent.toUpperCase();\r\n\r\n      if (!isNaN(Number(A)) && !isNaN(Number(B))) {\r\n        // handle numbers\r\n        if(Number(A) < Number(B)) return -1*flip;\r\n        if(Number(A) > Number(B)) return  1*flip;\r\n      } else {\r\n        // handle strings\r\n        if(A < B) return -1*flip;\r\n        if(A > B) return  1*flip;\r\n      }\r\n      return 0;\r\n    });\r\n\r\n    for (var i=0; i < rows.length; i++) {\r\n      tbody.appendChild(rows[i]);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import $ from 'jquery';\r\nimport { FilterCollection } from './FilterCollection'\r\n\r\n// Define the plugin function on the jQuery extension point.\r\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) {\r\n  let target = this;\r\n  // Merge the global options with the per-call options.\r\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\r\n\r\n  if (typeof options.columnSelector === 'undefined') options.columnSelector = '';\r\n  if (typeof options.sort === 'undefined') options.sort = true;\r\n  if (typeof options.search === 'undefined') options.search = true;\r\n  \r\n  let filterCollection = new FilterCollection(target, options);\r\n  filterCollection.initialize();\r\n\r\n  // Return the jQuery object for chaining.\r\n  return target;\r\n};\r\n\r\n// Define the plugin's global default options.\r\n($.fn as any).excelTableFilter.options = {};\r\n"]}